<?php
// $Id: fpss.module,v 1.1.2.2 2009/02/27 01:57:25 wilco Exp $

/**
 * @file
 * Lets users add a slideshow using the Front Page Slideshow software from Joomlaworks.gr
 *
 * Adds a block for when with the front page slideshow in it.
 */
/**
 * Implementation of hook_theme()
 */
function fpss_theme() {
  return array(
    'fpss_navigation' => array(
      'arguments' => array('form' => NULL),
      'template' => 'fpss_navigation',
    ),
    'fpss_slideshow' => array(
      'arguments' => array('form' => NULL),
      'template' => 'fpss_slideshow',
    ),
  );
}


/**
 * Implementation of hook_menu().
 */
function fpss_menu() {
  $items['admin/settings/fpss'] = array(
    'title' => 'Frontpage Slideshow',
    'description' => 'Set the main configuration options for Front Page Slideshow.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fpss_slideshow_settings'),
    'access arguments' => array('admin slideshow'),
  );
  $items['admin/settings/fpss/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'access' => array('admin slideshow'),
  );
  $items['admin/settings/fpss/language'] = array(
    'title' => 'Language',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fpss_language_settings'),
    'weight' => 10,
  );
  /*
  $items['node/add/fpss-slide'] = array(
    'title' => 'Slide',
    'acccess' => array('create slide'),
  );
  $items['node/add/fpss-slideshow'] = array(
    'title' => 'Slideshow',
    'acccess' => array('create slideshow'),
  );
  */

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function fpss_perm() {
  return array('create slide', 'edit own slide', 'create slideshow', 'edit own slideshow', 'admin slideshow', 'set slideshow template');
}


/**
 * Implementation of hook_node_info().
 *
 * Defines the FAQ node/content type.
 * @return
 *   An array, containing the title, module name and the description.
 */
function fpss_node_info() {
  return array(
    
    'fpss_slide' => array(
      'name' => t('Slide'),
      'module' => 'fpss',
      'description' => t('Add a new slide to a FPSS slideshow. Must have a slideshow set up first.'),
      'had_title' => TRUE,
      'title_label' => t('Title'),
      'had_body' => TRUE,
      'body_label' => t('Slide Text'),
      'min_word_count' => 3,
      'locked' => TRUE
    ),
    
    'fpss_slideshow' => array(
      'name' => t('Slideshow'),
      'module' => 'fpss',
      'description' => t('Add a new FPSS slideshow.'),
      'had_title' => TRUE,
      'title_label' => t('Title'),
      'had_body' => FALSE,
      'min_word_count' => 0,
      'locked' => TRUE
    )
  );
}


/**
 * Implementation of hook_node_name().
 */
function fpss_node_name($node) {
  if ($node->type == 'fpss_slide') {
    return t('Slide');
  } 
  elseif ($node->type == 'fpss_slideshow') {
    return t('Slideshow');
  }
}

/**
 * Implementation of hook_access().
 */
function fpss_access($op, $node, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = $user;
  }
  
  if ($node->type == 'fpss_slide') {
  
    if ($op == 'create') {
      return (user_access('create slide'));
    }
    
    if ($op == 'update' || $op == 'delete') {
      return (user_access('edit own slide') && ($account->uid == $node->uid));
    }
  
  } 
  elseif ($node->type == 'fpss_slideshow') {
  
    if ($op == 'create') {
      return (user_accesS('create slideshow'));
    }
    
    if ($op == 'update' || $op == 'delete') {
      return (user_access('edit own slideshow') && ($account->uid == $node->uid));
    }
  
  }
}

/**
 * Function to get the templates in the specified templates folder
 */

function fpss_dirlist($dir, $extra = FALSE) {
  $listarray = array();
  if (!$extras) $options['Global'] = 'Global';
  foreach(scandir($dir) as $entry)
    if($entry != '.' && $entry != '..' && $entry != '.svn' && $entry != 'CVS') {
      $path = pathinfo($entry);
      $template_name = $path['basename'];
      $listarray[$template_name] = $template_name;
    }
  $options['Random'] = 'Random';
  return($listarray);
}

/** 
 * Define fpss_slideshow_settings().
 */
function fpss_slideshow_settings() {
  $form = array();
  $options = fpss_dirlist(drupal_get_path('module','fpss').'/fpss/'.variable_get('fpss_templatesfolder','templates'));
  $form['fpss_template'] = array(
    '#type' => 'select',
    '#title' => t('Template'),
    '#default_value' => variable_get('fpss_template','Default'),
    '#options' => $options,
    '#description' => '<p>'.t('Global setting for the template. If no templates appear in the list, make sure you have your templates in the <strong>!url</strong> folder.', array('!url' => drupal_get_path('module','fpss').'/fpss/'.variable_get('fpss_templatesfolder','templates'))).'</p>',
  );
  $form['fpss_disablelib'] = array(
    '#type' => 'select',
    '#title' => t('Disable JS Library'),
    '#default_value' => variable_get('fpss_disablelib','1'),
    '#options' => array(
      '1' => t('Yes'),
      '0' => t('No'),
    ),
    '#description' => '<p>'.t('Global setting for disabling the javascript engine. Set to No if any problems occur.').'</p>',
  );
  $form['fpss_optimizejs'] = array(
    '#type' => 'select',
    '#title' => t('Optimize JS'),
    '#default_value' => variable_get('fpss_optimizejs','0'),
    '#options' => array(
      '1' => t('Yes'),
      '0' => t('No'),
    ),
    '#description' => '<p>'.t('Global setting for optimizing the javascript. This will use a compressed JS file using PHP compression rather than the raw JS. Set to Yes, if it doesn\'t work, leave at No.').'</p>',
  );
  $form['fpss_jslocation'] = array(
    '#type' => 'select',
    '#title' => t('JS Location (Header/Footer)'),
    '#default_value' => variable_get('fpss_jslocation','footer'),
    '#options' => array(
      'footer' => t('Footer'),
      'header' => t('Header'),
    ),
    '#description' => '<p>'.t('The location of the javascript in the page.  For performance, set this to footer.  If the slideshow doesn\'t work as expected, change to header.').'</p>',
  );
  $form['folders'] = array(
    '#type' => 'fieldset',
    '#title' => t('Folders'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => '<p>'.t('You need to copy these folders out of the Front Page Slideshow static PHP zip that you downloaded from <a href="!url">Joomlaworks.gr</a> and copy them to the fpss module folder. If you don\'t rename the folders you can leave the below settings at their defaults.<br /><br />The current module folder is: <strong>!module</strong>.', array('!url' => 'http://www.joomlaworks.gr', '!module' => drupal_get_path('module','fpss'))).'</p>'
  );
  $enginespath = drupal_get_path('module','fpss').'/fpss/'.variable_get('fpss_enginesfolder','engines');
  if (file_exists($enginespath)) {
    $engines_exists = t('<span style="color:#0c0;font-weight:bold;">Engines folder exists</span>.');
  }else {
    $engines_exists = t('<span style="color:#c00;font-weight:bold;">Engines folder doesn\'t exist</span>.');
  }
  $templatespath = drupal_get_path('module','fpss').'/fpss/'.variable_get('fpss_templatesfolder','templates');
  if (file_exists($templatespath)) {
    $templates_exists = t('<span style="color:#0c0;font-weight:bold;">Templates folder exists</span>.');
  }else {
    $templates_exists = t('<span style="color:#c00;font-weight:bold;">Templates folder doesn\'t exist</span>.');
  }
  $form['folders']['fpss_enginesfolder'] = array(
    '#type' => 'textfield',
    '#title' => t('Engines Folder'),
    '#default_value' => variable_get('fpss_enginesfolder','engines'),
    '#description' => '<p>'.t('Name of the engines folder. !exists',array('!exists' => $engines_exists)),
  );
  $form['folders']['fpss_templatesfolder'] = array(
    '#type' => 'textfield',
    '#title' => t('Templates Folder'),
    '#default_value' => variable_get('fpss_templatesfolder','templates'),
    '#description' => '<p>'.t('Name of the templates folder. !exists',array('!exists' => $templates_exists)),
  );

  //$filepath = file_directory_path();
  $stylesheetfolder = variable_get('fpss_stylesheetfolder', 'css');
  if (file_exists($stylesheetfolder)) {
    $stylesheet_exists = t('<span style="color:#0c0;font-weight:bold;">Stylesheet folder exists</span>.');
  }else {
    $stylesheet_exists = t('<span style="color:#c00;font-weight:bold;">Stylesheet folder doesn\'t exist</span>.');
  }  
  
  // Get the current location of the files folder
  $form['folders']['fpss_stylesheetfolder'] = array(
    '#type' => 'textfield',
    '#title' => t('Stylesheet Folder'),
    '#default_value' => variable_get('fpss_stylesheetfolder', 'css'),
    '#description' => '<p>'.t('The location of the stylesheet folder. This holds a cached version of the FPSS template_css.php output. !exists',array('!exists' => $stylesheet_exists)),
  );
  
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save FPSS settings') );
  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );
  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  //$form['#submit'][] = 'system_slideshow_settings_submit';
  //$form['#theme'] = 'system_settings_form';
  return system_settings_form($form);
}

function fpss_language_settings() {
  $form['fpss_lang_more'] = array(
    '#type' => 'textfield',
    '#title' => t('Read more text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_more', 'Read more...'),
  );
  $form['fpss_lang_loading'] = array(
    '#type' => 'textfield',
    '#title' => t('Loading text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_loading', 'Loading...'),
  );
  $form['fpss_lang_next'] = array(
    '#type' => 'textfield',
    '#title' => t('Next text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_next', 'Previous'),
  );
  $form['fpss_lang_prev'] = array(
    '#type' => 'textfield',
    '#title' => t('Previous text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_prev', 'Next'),
  );
  $form['fpss_lang_play'] = array(
    '#type' => 'textfield',
    '#title' => t('Play text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_play', 'Play'),
  );
  $form['fpss_lang_pause'] = array(
    '#type' => 'textfield',
    '#title' => t('Pause text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_pause', 'Pause'),
  );
  $form['fpss_lang_playpause'] = array(
    '#type' => 'textfield',
    '#title' => t('Play/Pause slide text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_playpause', 'Play/Pause Slide'),
  );
  $form['fpss_lang_clicknav'] = array(
    '#type' => 'textfield',
    '#title' => t('Click nav text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_clicknav', 'Click to navigate!'),
  );
  $form['fpss_lang_imgalt'] = array(
    '#type' => 'textfield',
    '#title' => t('Image alt text'),
    '#required' => TRUE,
    '#default_value' => variable_get('fpss_lang_imgalt', 'Click on the slide!'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_form().
 */
function fpss_form(&$node) {
  if ($node->type == 'fpss_slide') {
    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form['slide_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Slide URL'),
      '#description' => '<p>'.t('Address that the slide will link to. If http:// is ommited, the path will be used as local (eg, node/1).').'</p>',
      '#required' => TRUE,
      '#default_value' => $node->slide_url,
      '#weight' => -5
    );
    $form['slide_cat'] = array(
      '#type' => 'textfield',
      '#title' => t('Category'),
      '#default_value' => $node->slide_cat,
      '#weight' => -3,
      '#required' => TRUE
    );
    $form['slide_tag'] = array(
      '#type' => 'textfield',
      '#title' => t('Tagline'),
      '#default_value' => $node->slide_tag,
      '#weight' => -2,
      '#required' => TRUE
    );
    $options = array();
    $options[0] = '--Select--';
    $sql = "SELECT vid, title FROM {node} WHERE type = '%s'";
    $result = db_query(db_rewrite_sql($sql), 'fpss_slideshow');
    while ($data = db_fetch_object($result)) {
        $options[$data->vid] = $data->title;
    }
    $count = count($options);
    if ($count <= 1) {
      form_set_error('ssid',l(t('You must create a slideshow before you can create a slide.'), 'node/add/slideshow'));
    }
    $form['ssid'] = array(
      '#type' => 'select',
      '#title' => t('Slideshow'),
      '#required' => TRUE,
      '#options' => $options,
      '#weight' => -9,
      '#default_value' => $node->ssid,
    );
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t($type_data->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -10
    );
    $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => t($type_data->body_label),
      '#default_value' => $node->body,
      '#rows' => 7,
      '#required' => TRUE,
      '#weight' => 0,
      '#description' => t('This is the slide text that is used for the slide.'),
    );
    $form['body_filter']['filter'] = filter_form($node->format);
  }elseif ($node->type == 'fpss_slideshow') {
    if (user_access('set slideshow template') || $user->uid == 1) {
      $templates_path = drupal_get_path('module','fpss').'/fpss/'.variable_get('fpss_templatesfolder','templates');
      $options = fpss_dirlist($templates_path, TRUE);
      $form['template'] = array(
        '#type' => 'select',
        '#title' => t('Template'),
        '#default_value' => $node->template ? $node->template : variable_get('fpss_template','Default'),
        '#options' => $options,
        '#description' => '<p>'.t('The template to use for this slideshow. Selecting \'Random\' will use any of the templates available in the templates directory. When selecting Random, make sure the navigation bar is turned off as not all templates use the navigation bar and the width will vary.').'</p>',
      );
    }
    $form['dimensions'] = array(
      '#type' => 'fieldset',
      '#title' => 'Dimensions',
      '#description' => '<p>'.t('Set the dimensions of the slideshows height and width, etc.').'</p>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 1
    );
    $form['dimensions']['show_nav'] = array(
      '#type' => 'radios',
      '#title' => t('Show Navigation Bar'),
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#required' => TRUE,
      '#default_value' => $node->show_nav ? 1 : 0,
      '#description' => '<p>'.t('Show the navigation bar in the slideshow.').'</p>',
    );
    $form['dimensions']['width'] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#required' => TRUE,
      '#title' => t('Width'),
      '#default_value' => $node->width ? $node->width : 0,
      '#description' => '<p>'.t('Width of the slideshow in <strong>px</strong>.').'</p>',
    );
    $form['dimensions']['height'] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#required' => TRUE,
      '#title' => t('Height'),
      '#default_value' => $node->height ? $node->height : 0,
      '#description' => '<p>'.t('Height of the slideshow in <strong>px</strong>.').'</p>',
    );
    $form['dimensions']['sidebar_width'] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#title' => t('Sidebar Width'),
      '#default_value' => $node->sidebar_width ? $node->sidebar_width : 0,
      '#description' => '<p>'.t('Width of the sidebar on the slideshow in <strong>px</strong>.').'</p>',
    );
    $form['timing'] = array(
      '#type' => 'fieldset',
      '#title' => t('Timing'),
      '#description' => '<p>'.t('Set the timing of the slideshow delay, transition effects, etc.'). '</p>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 2,
    );
    $form['timing']['delay'] = array(
      '#type' => 'textfield',
      '#title' => t('Next Slide Delay'),
      '#description' => '<p>'.t('Time the slide will appear for in <strong>ms</strong> (seconds * 1000). Must be greater than 1000.').'</p>',
      '#default_value' => $node->delay ? $node->delay : 4000,
      '#required' => TRUE,
      '#size' => 10
    );
    $form['timing']['transition'] = array(
      '#type' => 'textfield',
      '#title' => t('Transition Time'),
      '#description' => '<p>'.t('Time for the transition from one slide to another in <strong>ms</strong> (seconds * 1000).').'</p>',
      '#required' => TRUE,
      '#default_value' => $node->transition ? $node->transition : 500,
      '#size' => 10
    );
    $form['timing']['loading'] = array(
      '#type' => 'textfield',
      '#title' => t('Loading Time'),
      '#description' => '<p>'.t('Initial loading time of the slideshow in <strong>ms</strong> (seconds * 1000).').'</p>',
      '#required' => TRUE,
      '#default_value' => $node->loading ? $node->loading : 500,
      '#size' => 10
    );
    $form['timing']['rotate_action'] = array(
      '#type' => 'select',
      '#title' => t('Rotate Action'),
      '#description' => '<p>'.t('Action used to change to the next slide.  Only takes affect when sidebar is enabled.').'</p>',
      '#options' => array(
        'click' => t('Click'),
        'mouseover' => t('MouseOver'),
      ),
      '#default_value' => $node->rotate_action ? $node->rotate_action : 'click',
      '#required' => TRUE
    );
    $form['text'] = array(
      '#type' => 'fieldset',
      '#title' => t('Text'),
      '#description' => '<p>'.t('Set the text settings of the slideshow.').'</p>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 3
    );
    $form['text']['show_title'] = array(
      '#type' => 'radios',
      '#title' => t('Show Title'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Show title on the slideshow where supported by the template.').'</p>',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#default_value' => $node->show_title ? 1 : 0,
    );
    $form['text']['show_category'] = array(
      '#type' => 'radios',
      '#title' => t('Show Category'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Show category on the slideshow where supported by the template.').'</p>',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#default_value' => $node->show_category ? 1 : 0,
    );
    $form['text']['show_tagline'] = array(
      '#type' => 'radios',
      '#title' => t('Show Tagline'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Show tagline on the slideshow where supported by the template.').'</p>',
      '#options' => array(
        1 => t('Yes'),
        0 => t('No')
      ),
      '#default_value' => $node->show_tagline ? 1 : 0,
    );
    $form['text']['show_slidetext'] = array(
      '#type' => 'radios',
      '#title' => t('Show Slidetext'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Show slidetext on the slideshow where supported by the template.').'</p>',
      '#options' => array(
        1 => t('Yes'),
        0 => t('No')
      ),
      '#default_value' => $node->show_slidetext ? 1 : 0,
    );
    $form['text']['show_readmore'] = array(
      '#type' => 'radios',
      '#title' => t('Show Read More'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Show read more link on the slideshow where supported by the template.').'</p>',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#default_value' => $node->show_readmore ? 1 : 0,
    );
    $form['text']['maximum'] = array(
      '#type' => 'fieldset',
      '#title' => t('Maximums'),
      '#description' => '<p>'.t("Enter a value for either a word limit or character limit. If a character limit is set, the slideshow will ignore the max words value.").'</p>',
      '#collapsible' => TRUE
    );
    $form['text']['maximum']['maxwords'] = array(
      '#type' => 'textfield',
      '#title' => t('Max words'),
      '#description' => '<p>'.t('Max words to appear in the slidetext.').'</p>',
      '#size' => 5,
      '#default_value' => $node->maxwords ? $node->maxwords : 26,
    );
    $form['text']['maximum']['maxchars'] = array(
      '#type' => 'textfield',
      '#title' => t('Max Characters'),
      '#description' => '<p>'.t('Max characters to appear in the slidetext.').'</p>',
      '#size' => 5,
      '#default_value' => $node->maxchars ? $node->maxchars : '',
    );
    $form['text']['strip'] = array(
      '#type' => 'radios',
      '#title' => t('Strip HTML Tags'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Strip any HTML tags from the slidetext. Only tags still allowed are &lt;a&gt;&lt;b&gt;&lt;span&gt;.').'</p>',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#default_value' => $node->strip ? 1 : 0,
    );
    $form['text']['links'] = array(
      '#type' => 'radios',
      '#title' => t('Open link in a new window'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Select <strong>yes</strong> to open links in a new window.').'</p>',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#default_value' => $node->links ? 1 : 0,
    );
    $form['order'] = array(
      '#type' => 'fieldset',
      '#title' => t('Slide Order'),
      '#description' => '<p>'.t('Set a limit to the amount of slides or change the slides to a random order.').'</p>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 4
    );
    $form['order']['random_order'] = array(
      '#type' => 'radios',
      '#title' => t('Random Slide Order'),
      '#required' => TRUE,
      '#description' => '<p>'.t('Randomise the order of the slides in the slideshow.').'</p>',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No')
      ),
      '#default_value' => $node->random_order ? 1 : 0,
    );
    $form['order']['limit_slides'] = array(
      '#type' => 'textfield',
      '#title' => t('Slide Limit'),
      '#description' => '<p>'.t('Show only this many slides. Leave blank for unlimited. If 12 slides are available and limit is set to 10, only the first 10 slides will show.<br />Set Random to yes to allow all slides to be viewed in a random order but still have all show available at some point.').'</p>',
      '#default_value' => $node->limit_slides ? $node->limit_slides : '',
    );
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Slideshow Name'),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -10
    );
  }
  return $form;
}

function fpss_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if ($node->type == 'fpss_slideshow') {
        fpss_stylesheet_create($node);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 * Add menu item fields to the node form.
 */
function fpss_form_alter($form_id, &$form) {
  if ($form_id == 'fpss_slide_node_form' && isset($form['attachments'])) {
    $form['attachments']['#title'] = t('Images');
    $form['attachments']['#description'] = t('Upload the image for the slideshow. This should be a JPG, GIF or PNG. Do not upload more than 1 file.');
    $form['attachments']['#collapsed'] = FALSE;
    $form['attachments']['#weight'] = 1;
  }
  if ($form_id == 'fpss_slideshow_node_form' || $form_id == 'fpss_slide_node_form') {
    $form['options']['promote']['#default_value'] = 0;
    $form['comment_settings']['comment']['#default_value'] = 0;
  }
}

/**
 * Implementation of hook_validate().
 */
function fpss_validate(&$node) {
  if ($node->type == 'fpss_slideshow') {
    // Make sure all the inputs are numbers
    if (isset($node->width)) {
      if (!is_numeric($node->width)) {
        form_set_error('width',t('Width must be a number.'));
      }
      if ($node->width <= 0) {
        form_set_error('width',t('Width must be greater than 0.'));
      }
    }
    if (isset($node->height)) {
      if (!is_numeric($node->height)) {
        form_set_error('height',t('Height must be a number.'));
      }
      if ($node->height <= 0) {
        form_set_error('height',t('Height must be greater than 0.'));
      }
    }
    if (isset($node->sidebar_width) && $node->show_nav == 1) {
      if ($node->sidebar_width == NULL) {
        form_set_error('sidebar_width',t('Sidebar width must be a number if you want a navigation bar.'));
      }
      if (!is_numeric($node->sidebar_width)) {
        form_set_error('sidebar_width',t('Sidebar width must be a number.'));
      }
      if ($node->sidebar_width <= 0) {
        form_set_error('sidebar_width',t('Sidebar width must be greater than 0.'));
      }
    }
    if (isset($node->delay)) {
      if (!is_numeric($node->delay)) {
        form_set_error('delay',t('Delay must be a number.'));
      }
    }
    if (isset($node->transition)) {
      if (!is_numeric($node->transition)) {
        form_set_error('transition',t('Transition must be a number.'));
      }
    }
    if (isset($node->loading)) {
      if (!is_numeric($node->loading)) {
        form_set_error('loading',t('Loading time must be a number.'));
      }
    }
    if (isset($node->limit_slides) && $node->limit_slides != '') {
      if (!is_numeric($node->limit_slides)) {
        form_set_error('limit_slides',t('The limit for the slides must be a number.'));
      }
    }
  }elseif ($node->type == 'fpss_slide') {
    if ($node->ssid == 0) {
      form_set_error('ssid',t('Please select a slideshow to add this slide to.'));
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function fpss_insert(&$node) {
  if ($node->type == 'fpss_slide') {
    db_query("INSERT INTO {fpss_slides} (nid, vid, ssid, slide_url, slide_cat, slide_tag) VALUES (%d, %d, %d, '%s', '%s', '%s')", $node->nid, $node->vid, $node->ssid, $node->slide_url, $node->slide_cat, $node->slide_tag);
  }elseif ($node->type == 'fpss_slideshow') {
    db_query("INSERT INTO {fpss_slideshows} (nid, vid, show_nav, width, height, sidebar_width, delay, transition, loading, rotate_action, show_title, show_category, show_tagline, show_slidetext, show_readmore, maxwords, maxchars, strip, links, random_order, limit_slides, template) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, '%s', %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, '%s')", $node->nid, $node->vid, $node->show_nav, $node->width, $node->height, $node->sidebar_width, $node->delay, $node->transition, $node->loading, $node->rotate_action, $node->show_title, $node->show_category, $node->show_tagline, $node->show_slidetext, $node->show_readmore, $node->maxwords, $node->maxchars, $node->strip, $node->links, $node->random_order, $node->limit_slides, $node->template);
  }
}

/**
 * Implementation of hook_update().
 */
function fpss_update($node) {
  if ($node->revision) {
    fpss_insert($node);
  }
  if ($node->type == 'fpss_slide' && !$node->revision) {
    db_query("UPDATE {fpss_slides} SET slide_url = '%s', slide_cat = '%s', slide_tag = '%s', ssid = %d WHERE vid = %d", $node->slide_url, $node->slide_cat, $node->slide_tag, $node->ssid, $node->vid);
  }elseif ($node->type == 'fpss_slideshow' && !$node->revision) {
    db_query("UPDATE {fpss_slideshows} SET show_nav = %d, width = %d, height = %d, sidebar_width = %d, delay = %d, transition = %d, loading = %d, rotate_action = '%s', show_title = %d, show_category = %d, show_tagline = %d, show_slidetext = %d, show_readmore = %d, maxwords = %d, maxchars = %d, strip = %d, links = %d, random_order = %d, limit_slides = %d, template = '%s' WHERE vid = %d", $node->show_nav, $node->width, $node->height, $node->sidebar_width, $node->delay, $node->transition, $node->loading, $node->rotate_action, $node->show_title, $node->show_category, $node->show_tagline, $node->show_slidetext, $node->show_readmore, $node->maxwords, $node->maxchars, $node->strip, $node->links, $node->random_order, $node->limit_slides, $node->template, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function fpss_delete(&$node) {
  if ($node->type == 'fpss_slide') {
    db_query("DELETE FROM {fpss_slides} WHERE nid = %d", $node->nid);
  }elseif ($node->type == 'fpss_slideshow') {
    db_query("DELETE FROM {fpss_slideshows} WHERE nid = %d", $node->nid);
  }
}

/**
 * Implementation of hook_load().
 */
function fpss_load($node) {
  if ($node->type == 'fpss_slide') {
    $additions = db_fetch_object(db_query('SELECT * FROM {fpss_slides} WHERE vid = %d', $node->vid));
  }elseif ($node->type == 'fpss_slideshow') {
    $additions = db_fetch_object(db_query('SELECT * FROM {fpss_slideshows} WHERE vid = %d', $node->vid));
  }
  return $additions;
}

function fpss_add_css($path = NULL, $type = 'module', $media = 'all', $preprocess = TRUE) {
  static $css = array();

  // Create an array of CSS files for each media type first, since each type needs to be served
  // to the browser differently.
  if (isset($path)) {
    // This check is necessary to ensure proper cascading of styles and is faster than an asort().
    if (!isset($css[$media])) {
      $css[$media] = array('module' => array(), 'theme' => array());
    }
    $css[$media][$type][$path] = $preprocess;
  }

  return $css;
}


/**
 * Implementation of hook_block().
 */
function fpss_block($op = 'list',$delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $sql = "SELECT vid, title FROM {node} n WHERE type = '%s' AND status = %d";
      $result = db_query(db_rewrite_sql($sql), 'fpss_slideshow', 1);
      while ($data = db_fetch_object($result)) {
        $blocks[$data->vid]['info'] = t('Slideshow - ' . $data->title);
      }
      return $blocks;
      
    case 'view':
      if (is_numeric($delta)) {
        
        $status = db_result(db_query("SELECT n.status FROM {node} n JOIN {fpss_slideshows} f ON  f.vid = n.vid WHERE n.vid = %d", $delta));
        if (!$status) return;
        $config = db_fetch_object(db_query('SELECT * FROM {fpss_slideshows} s JOIN {node} n ON s.vid = n.vid WHERE n.vid = %d', $delta));
        
        $fpss_javascript      = 'jquery';
        $fpss_template        = $config->template;
        
        // Get module variables
        $fpss_optimizejs      = variable_get('fpss_optimizejs', 0);
        $fpss_disablelib      = variable_get('fpss_disablelib', 0);
        $fpss_jslocation      = variable_get('fpss_jslocation', 'footer');
        $fpss_containerclass  = variable_get('fpss_containerclass', '');
        $fpss_language        = variable_get('fpss_language', 'english');
        $fpss_templatesfolder = variable_get('fpss_templatesfolder', 'templates');
        $fpss_enginesfolder   = variable_get('fpss_enginesfolder', 'engines');

        // Insert CSS file
        $fpss_stylesheetfolder = variable_get('fpss_stylesheetfolder', 'css');
        drupal_add_css($fpss_stylesheetfolder.'/fpss-'.$fpss_template.'.css', 'module', 'all', FALSE);
        
        // Insert JS Path
        $main_js_path = drupal_get_path('module','fpss').'/fpss/'.$fpss_enginesfolder.'/'.$fpss_javascript;

        if($fpss_optimizejs) {
          /*
          // TODO: Mod this file to output correct JS.
          drupal_add_js($main_js_path.'-fpss.php', 'module', $fpss_jslocation);
          */
        } else {
          if(!$fpss_disablelib) {
            drupal_add_js($main_js_path.'-comp.js', 'module', $fpss_jslocation);
          }
          drupal_add_js($main_js_path.'-fpss-comp.js', 'module', $fpss_jslocation);
        }
        $js = 'var speed_delay = '.$config->delay.';';
        $js .= 'var slide_speed = '.$config->transition.';';
        $js .= 'var fpssLoaderDelay = '.$config->loading.';';
        $js .= 'var CTRrotateAction = \''.$config->rotate_action.'\';';
        drupal_add_js($js,'inline', $fpss_jslocation);
        
        $sql = "SELECT * FROM {node} n JOIN {node_revisions} r ON n.vid = r.vid JOIN {fpss_slides} f ON  f.vid = r.vid JOIN {upload} a ON a.vid = r.vid JOIN {files} q ON q.fid = a.fid WHERE n.type = '%s' AND n.status = %d AND f.ssid = %d";
        
        $result = db_query(db_rewrite_sql($sql), 'fpss_slide', 1, $delta);
        $slides = array();
        $i = 0;
        while ($data = db_fetch_object($result)) {
          // Put data in to array
          $slides[$i]['slidelink'] = $data->slide_url;
          $slides[$i]['title'] = $data->title;
          $slides[$i]['category'] = $data->slide_cat;
          $slides[$i]['tagline'] = $data->slide_tag;
          $slides[$i]['text'] = $data->body;
          $slides[$i]['slideimage'] = base_path().$data->filepath;
          $i++;
        }
        
        if ($fpss_template=='JJ-Obs' || $fpss_template=='JJ-Rasper') { $groupnav = 1; } else { $groupnav = 0; }
        // Hide .fpss-introtext completely if the content is hidden as well
        if (!$config->show_title && !$config->show_category && !$config->show_slidetext && !$config->show_tagline && !$config->show_readmore) {
          $hidecontent = ' style="display:none;"';
        } else {
          $hidecontent = '';
        }
        if($config->strip){
          $allowed_tags = "<a><b><span>"; // these tags will NOT be stripped off!
        }
        if($config->links){$target = ' target="_blank"';}
        
        if($config->random_order) {shuffle($slides);}
        
        $html = '';
  
        // Start loop
        $step = 1;
        if($config->limit_slides) {$i = 0;}
        
        foreach ($slides as $slide) {
        
          // Limit
          if($limit_slides) { if($i>=$limit_slides) continue; }
          // Slide data
          if (substr($slide['slidelink'], 0, 5) == 'http:') {
            $slidelink = $slide['slidelink'];
          }else {
            $slidelink = $slide['slidelink'];
          }
          $slidetitle = $slide['title'];
          $slidecategory = $slide['category'];
          $slidetagline = $slide['tagline'];
          $slidetext = preg_replace("/<img.+?>/", "", $slide['text']);
          $slideimage = $slideimagefolder.$slide['slideimage'];
          
          // Assemble slide content
          
          $slidecontent = "\n";
          // ---Title---
          if ($config->show_title) {
            $slidecontent .= "<h1><a".$target." href=\"".$slidelink."\">".$slidetitle."</a></h1>\n";
          }
          
          // ---Category (if applicable)---
          if ($config->show_category) {
            $slidecontent .= "<h2>".$slidecategory."</h2>\n";
          }
        
          // ---Tagline text---
          if ($config->show_tagline) {
            $slidecontent .= "<h3>".strip_tags($slidetagline)."</h3>\n";
          }
          
          // ---Slide text---
          // HTML cleanup
          if ($config->striptags) {
            $slidetext = strip_tags($slidetext, $allowed_tags);
          }
          // Character limit
          if ($config->maxchars) { 
            if(function_exists("mb_string")) {
              $slidetext = mb_substr($slidetext, 0, $config->maxchars).'...'; 
            } else {
              $slidetext = substr($slidetext, 0, $config->maxchars).'...';
            }
          }   
          // Word limit
          if (!function_exists('word_limiter')) {
            function word_limiter($str, $limit = 100, $end_char = '&#8230;') {
                if (trim($str) == '') return $str;
                preg_match('/\s*(?:\S*\s*){'. (int) $limit .'}/', $str, $matches);
                if (strlen($matches[0]) == strlen($str)) $end_char = '';
                return rtrim($matches[0]).$end_char;
            }
          }
          if ($config->maxwords && !$config->maxchars) {
            $slidetext = word_limiter($slidetext,$config->maxwords);
          }  
          if ($config->show_slidetext) {
            $slidecontent .= "<p>".t($slidetext)."</p>\n";
          }
          // ---The 'read more' link---
          if ($config->show_readmore) {
            $slidecontent .= "<a".$target." href=\"".$slidelink."\" class=\"readon\">".variable_get('fpss_lang_more', 'Read more...')."</a>\n";
          }
          // Output
          $html .= '
          <div class="slide">
            <div class="slide-inner">
              <a'.$target.' class="fpss_img" href="'.$slidelink.'">
                <span>
                  <span style="background:url('.$slideimage.') no-repeat;">
                    <span>
                      <img src="'.$slideimage.'" alt="'.variable_get('fpss_lang_imgalt', 'Click on the slide!').'" />
                    </span>
                  </span>
                </span>
              </a>
              <div class="fpss-introtext"'.$hidecontent.'>
                <div class="slidetext">'.t($slidecontent).'</div>
              </div>
            </div>
          </div>
          ';
          
          if($limit_slides) {$i++;}
          $step++;
        }
        
        // ---------------------------------- NAVIGATION OUTPUT ---------------------------------- //
        
        $navhtml = '';        
        $step = 1;
        if($config->limit_slides) {$j = 0;}
        foreach ($slides as $key => $slide) {
          if($config->limit_slides) {if($j>=$config->limit_slides) continue;}
        
          // Slide data
          $slidelink = $slide['slidelink'];
          $slidetitle = $slide['title'];
          $slidetagline = strip_tags($slide['tagline']);
          $slideimage = $slideimagefolder.$slide['slideimage'];
        
          $key = $key + 1;
          if ($key < 10) { $key = "0".$key; }
          $navhtml .= '<li>';
          $navhtml .= '<a class="navbutton off navi" href="javascript:void(0);" title="'.variable_get('fpss_lang_clicknav', 'Click to navigate!').'">';
          $navhtml .= '
              <span class="navbar-img"><img src="'.$slideimage.'" alt="'.variable_get('fpss_lang_clicknav', 'Click to navigate!').'" /></span>
              <span class="navbar-key">'.t($key).'</span>
              <span class="navbar-title">'.t($slidetitle).'</span>
              <span class="navbar-tagline">'.t($slidetagline).'</span>
              <span class="navbar-clr">&nbsp;</span>';
          $navhtml .= '</a></li>';
          if($limit_slides) {$j++;}
          $step++;
        }
        
        $output = '<div id="fpss-outer-container">';    
          $output .= '<div id="fpss-container">';
            $output .= '<div id="fpss-slider">';
              $output .= '<div id="slide-loading"></div>';
              $output .= '<div id="slide-wrapper">';
                $output .= '<div id="slide-outer">'.$html.'</div>';
              $output .= '</div>';
            $output .= '</div>';
            $output .= '<div id="navi-outer">';
              $output .= '<div id="pseudobox"></div>';
              $output .= '<div class="ul_container">';
                $output .= '<ul>';
                if ($groupnav) {
                  $output .= $navhtml;
                  $output .= '<li class="noimages"><a id="fpss-container_next" href="javascript:void(0);" onclick="showNext();clearSlide();" title="'.variable_get('fpss_lang_prev', 'Next').'"></a></li>';
                  $output .= '<li class="noimages"><a id="fpss-container_playButton" href="javascript:void(0);" onclick="playButtonClicked();return false;" title="'.variable_get('fpss_lang_playpause', 'Play/Pause Slide').'">'.variable_get('fpss_lang_pause', 'Pause').'</a>';
                  $output .= '<li class="noimages"><a id="fpss-container_prev" href="javascript:void(0);" onclick="showPrev();clearSlide();" title="'.variable_get('fpss_lang_next', 'Previous').'"></a></li>';
                  $output .= '<li class="clr"></li>';
                }
                else {
                  $output .= '<li class="noimages"><a id="fpss-container_prev" href="javascript:void(0);" onclick="showPrev();clearSlide();" title="'.variable_get('fpss_lang_next', 'Previous').'">&laquo;</a></li>';
                  $output .= $navhtml;
                  $output .= '<li class="noimages"><a id="fpss-container_next" href="javascript:void(0);" onclick="showNext();clearSlide();" title="'.variable_get('fpss_lang_prev', 'Next').'">&raquo;</a></li>';
                  $output .= '<li class="noimages"><a id="fpss-container_playButton" href="javascript:void(0);" onclick="playButtonClicked();return false;" title="'.variable_get('fpss_lang_playpause', 'Play/Pause Slide').'">'.variable_get('fpss_lang_pause', 'Pause').'</a></li>';
                }
                $output .= '</ul>';
              $output .= '</div>';
            $output .= '</div>';
            $output .= '<div class="fpss-clr"></div>';
          $output .= '</div>';
          $output .= '<div class="fpss-clr"></div>';
        $output .= '</div>';
        
        
        $block['content'] = $output;
      }
      return $block;
  }
}



/**
 * Create the stylesheet for the slideshow
 */
function fpss_stylesheet_create($node) {
  global $base_url;

  // Collect the slideshow's config values
  //$config = db_fetch_object(db_query('SELECT * FROM {fpss_slideshows} s JOIN {node} n ON s.vid = n.vid'));
  
  // Set the template type
  if (!$node->template) {
    $fpss_template = variable_get('fpss_template', 'Default');
  } 
  else {
    $fpss_template = $node->template;
  }
  
  // Get the path for the template folder
  $fpss_templatesfolder = variable_get('fpss_templatesfolder', 'templates');
  
  // Check to see if the stylesheet is set to Random.
  if ($fpss_template == 'Random') {
    $templates = fpss_dirlist(drupal_get_path('module','fpss').'/fpss/'.variable_get('fpss_templatesfolder','templates'));
    $fpss_template = array_rand($templates);
  }
  
  // Get the path to the template_css.php script from FPSS
  $main_css_path = drupal_get_path('module','fpss').'/fpss/'. $fpss_templatesfolder.'/'. $fpss_template.'/template_css.php';
  
  // Prepate the values to be passed into the template via URI
  //$query = '?w='. $node->width.'&h='. $node->height.'&sw='. $node->sidebar_width.'';
  $query = array('w' => $node->width, 'h' => $node->height, 'sw' => $node->sidebar_width);
  
  // Load the local CSS stylesheet.
  /*
  $style = file_get_contents($base_url . '/' . $main_css_path . $query);
  
  */
  $style = _fpss_get_include_contents($main_css_path, $query);
  //firep($style, 'FPSS Location');

  // Return the path to where this CSS file originated from, stripping
  // off the name of the file at the end of the path.
  $base = base_path() . dirname($main_css_path) .'/';
  _drupal_build_css_path(NULL, $base);          

  // Prefix all paths within this CSS file, ignoring absolute paths.
  $style = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $style);
  
  $path = variable_get('fpss_stylesheetfolder', '/css');
  
  if (_fpss_save_stylesheet($path . '/fpss-'.$fpss_template.'.css', $style)) {
    if (file_exists($path . '/fpss-'.$fpss_template.'.css')) {
      drupal_set_message ('FPSS stylesheet successfully created.');
    }
    else {
      drupal_set_message ('FPSS stylesheet failed.');
    }
  }
  
}

/**
 * Save the rewritten stylesheet to disk.
 */
function _fpss_save_stylesheet($file, $style) {
  //drupal_set_message (var_export($file, TRUE));

  // Write new stylesheet.
  $filename = _fpss_file_save_data($style, $file, FILE_EXISTS_REPLACE);

  if (isset($filename)) {
    // Set standard file permissions for webserver-generated files.
    @chmod($file, 0664);
    return TRUE;
  } else {
    return FALSE;
  }
}

function _fpss_get_include_contents($filename, $query) {
  if (is_file($filename)) {
    $_GET = $query;
    ob_start();
    include $filename;
    $contents = ob_get_contents();
    ob_end_clean();
    return $contents;
  }
  return false;
}

function _fpss_file_save_data($data, $dest, $replace = FILE_EXISTS_RENAME) {
  $temp = file_directory_temp();
  // On Windows, tempnam() requires an absolute path, so we use realpath().
  $file = tempnam(realpath($temp), 'file');
  if (!$fp = fopen($file, 'wb')) {
    drupal_set_message(t('The file could not be created.'), 'error');
    return 0;
  }
  fwrite($fp, $data);
  fclose($fp);

  if (!_fpss_file_move($file, $dest, $replace)) {
    return 0;
  }

  return $file;
}

function _fpss_file_move(&$source, $dest = 0, $replace = FILE_EXISTS_RENAME) {
  $path_original = is_object($source) ? $source->filepath : $source;

  if (_fpss_file_copy($source, $dest, $replace)) {
    $path_current = is_object($source) ? $source->filepath : $source;

    if ($path_original == $path_current || file_delete($path_original)) {
      return 1;
    }
    drupal_set_message(t('The removal of the original file %file has failed.', array('%file' => $path_original)), 'error');
  }
  return 0;
}

function _fpss_file_copy(&$source, $dest = 0, $replace = FILE_EXISTS_RENAME) {
  //$dest = file_create_path($dest);

  $directory = $dest;
  $basename = file_check_path($directory);

  // Make sure we at least have a valid directory.
  if ($basename === FALSE) {
    $source = is_object($source) ? $source->filepath : $source;
    drupal_set_message(t('The selected file %file could not be uploaded, because the destination %directory is not properly configured.', array('%file' => $source, '%directory' => $dest)), 'error');
    watchdog('file system', 'The selected file %file could not be uploaded, because the destination %directory could not be found, or because its permissions do not allow the file to be written.', array('%file' => $source, '%directory' => $dest), WATCHDOG_ERROR);
    return 0;
  }

  // Process a file upload object.
  if (is_object($source)) {
    $file = $source;
    $source = $file->filepath;
    if (!$basename) {
      $basename = $file->filename;
    }
  }

  $source = realpath($source);
  if (!file_exists($source)) {
    drupal_set_message(t('The selected file %file could not be copied, because no file by that name exists. Please check that you supplied the correct filename.', array('%file' => $source)), 'error');
    return 0;
  }

  // If the destination file is not specified then use the filename of the source file.
  $basename = $basename ? $basename : basename($source);
  $dest = $directory .'/'. $basename;

  // Make sure source and destination filenames are not the same, makes no sense
  // to copy it if they are. In fact copying the file will most likely result in
  // a 0 byte file. Which is bad. Real bad.
  if ($source != realpath($dest)) {
    if (!$dest = file_destination($dest, $replace)) {
      drupal_set_message(t('The selected file %file could not be copied, because a file by that name already exists in the destination.', array('%file' => $source)), 'error');
      return FALSE;
    }

    if (!@copy($source, $dest)) {
      drupal_set_message(t('The selected file %file could not be copied.', array('%file' => $source)), 'error');
      return 0;
    }

    // Give everyone read access so that FTP'd users or
    // non-webserver users can see/read these files,
    // and give group write permissions so group members
    // can alter files uploaded by the webserver.
    @chmod($dest, 0664);
  }

  if (isset($file) && is_object($file)) {
    $file->filename = $basename;
    $file->filepath = $dest;
    $source = $file;
  }
  else {
    $source = $dest;
  }

  return 1; // Everything went ok.
}